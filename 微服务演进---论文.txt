
第一篇论文

# 1.  Microservices Maturity Model 微服务成熟度模型


## 这篇论文的贡献

完成了一个跨企业的微服务成熟度评估模型（MSMM）
- 帮企业客户了解他们所处的位置，以及为了成为一个基于微服务的成熟企业，他们还需要做些什么
- 此外，该成熟度模型为已经在使用微服务的团队提供了指导，帮助他们了解下一个改进之处

## 使用的方法

  一组评估方法的参数和 一个评估工具包（问卷，工具）

  

## 得出的结论

#### 微服务体系结构成熟将使企业收益：

1. 关注与业务需求
2. 敏捷性，企业可以快速地向市场引入新产品或增强功能
3. 提升客户体验
4. 可以独立于其它服务开发部署
5. 减少对关键资源的依赖
6. 提高了软件开发/实现调度的准确性
7.更有效的部署技术解决方案提高了可跟踪性
 
#### 企业的困惑：

1. 怎末才能成为一个成熟的微服务企业
2. 企业的路线图是什么
3. 什么是微服务成熟度模型？我们公司处于什么位置
4. 采用微服务的架构基础是什么
5. 微服务基础设施先决条件是什么

####  企业采用微服务的主要驱动因素：

1. 企业的主要业务围绕着极高的交易量
2. 快速开发，减少了实现和发布周期，并支持持续交付
3. 云服务的可伸缩性
4. 可以集成不同系统，不同编程模型的业务功能的解决方案
5. 可以敏捷的调整业务和it功能
6. 更好的投资回报率
7. 用于增量开发和业务软件的持续部署

#### 微服务成熟度模型
 分了0-5级， 采用积分卡的形式





第二篇论文

#  2. Supporting Microservice Evolution

## 这篇论文的贡献

  提出了一个基于服务演化建模的方法
- 结合静态信息和动态信息来生成演化的基于微服务的系统的精确表示，
- 来帮助工程师管里升级服务，体系结构演进和不断变化的部署权衡。

- 论文背景介绍

服务演化的过程，往往是敏捷和快速演进， 并且不断重新部署。 
如果是开发人员来管里这种演进，需要手动的不断收集和评估系统行为， 这个过程很乏味，很容易出错，而且很慢
传统的日志像ELK 堆栈，虽然很有用，但都是单个系统的日志的低级信息，  往往需要拼凑多个来源的日志 


#### 遇到的挑战

1. 检查升级一致性：  确定版本兼容和一致性
    （传统的做法： 是手动识别服务间的依赖关系 ，开发人员进行交互，或代码检查）

2. 确定架构的改进：  微服务演进的过程中，可能会导致内聚力下降， 相关服务的耦合增加 
 （传统的做法： 是需要开发人员手动和高度参与的， 需要了解全局依赖关系）

3. 评估不断变法的部署权衡： 一台机器上两个VM， 或两个docker , 可能会损害性能，可伸缩性，容错能力 
 （传统的做法：开发人员不断试错和不断评估部署，没有系统的策略或很多工具支持）



## 使用的方法
 
     服务演化模型 在相关空间中组合有关不断演化的微服务的结构，部署和运行时信息，通过汇总和分析这些信息，
  为开发人员的维护和演进任务提供可操作的见解 


## 得出的结论

    本文提出的方法，依赖于分布式跟踪，日志分析，和程序分析技术，可以向负责相关微服务的开发人员发出更改/重构的建议
   


第三篇论文

#  3.  Migrating towards Microservice Architectures: an Industrial Survey

## 这篇论文的贡献

 报告了工业中采用微服务的迁移实践的实证研究， 进行了一项针对迁移应用程序的从业者调查：
 收集了:
-  迁移到微服务体系结构，已经执行了哪些活动
-  迁移过程中面临的挑战信息 （通过访谈 + 问卷）


## 使用的方法

主要分为两个阶段
1. 设计了一个访谈指南, 用于对行业从业者进行5次探索性访谈
2. 使用访谈指南和访谈结果，设计了一个在线调查问卷，总共有16家公司和不同阶段的18名从业者参与了研究
设置了35个问题的问卷， 每个问题一列，每个参与者一行


从收集到的数据进行分析， 讨论一下迁移的看法：
1. 现有系统的体系结构
2. 从现有体系结构迁移到新体系结构
3. 新体系结构的实现

受访者认为最相关的活动是：
1. 将域划分为若干子域
2. 新架构中服务标识
3. 域驱动设计实践的应用
4. 系统分解


## 得出的结论
   当迁移到MSA 时
- 根据向微服务迁移实践的实际情况可以更好的塑造研究人员的方法和技术
- 从业者在计划迁移到MSA 的时候，需要向其他人学习这种潜在的破坏性活动是如何在其他工业环境进行的
  



第四篇论文

# Microservices The Journey So Far and Challenges Ahead

这个整篇文章介绍微服务的好处和坏（这应该没啥好记录的， 下面记录主要内容）


## 从技术和架构的角度观察了微服务的发展

####  从技术的角度看

>  技术浪潮
1. 容器技术
2. 服务发现技术
3. 监控技术
4. 容器编排技术
5. 延迟和容错
6. 持续交互技术 Devops
7. 混沌工程
8. sidecar 技术
9. Faas 技术
10. 服务网格技术

这里面的工具大多来自工业界


####  从体系结构的角度看

> 一下 4代微服务体系结构
1. 各个服务使用轻量级的容器技术， 使用了编排技术来部署和管理
2. 引入了服务发现和可重用的容错通信库
3. 引入了标准的服务代理，sidecars， 解决网络通信，日志，容错，服务发现，负载等问题
4. 利用Faas 和一些无组件计算技术，来进一步简化微服务的开发和交付


## 未来的挑战
- 服务模块化方法，  找到合适的模块，合适的大小，合适的职则和精心设计的接口
- 服务粒度 ---  几十个类以及可能的方法封装成了一个微服务
- 前端集成和模块化
- 资源监控和管理
- 故障恢复和自我修复
- 组织文化和协调


第五篇论文

# Architecting with microservices: A systematic mapping study
 (这篇论文太长了，介绍的东西是比较丰富的，主要从其他人的论文中总结了目前相关研究的问题分布， 如微服务设计问题，安全问题等)

## 这篇论文的贡献

> 回答了三个问题
RQ1: 使用微服务进行架构的研究的趋势是什么？
RQ2：使用微服务进行架构研究的重点是什么？
RQ3：工业上采用现有的微服务架构研究的潜力是什么？

- 用于分类，比较和评估特定于微服务的架构解决方案，方法和技术（例如，策略，模式，样式，视图，模型，参考架构或架构语言）的可重用框架;
- 微服务架构的最新技术地图;
- 评估工业采用现有的微服务架构研究成果的可能性;
- 基于证据的讨论，讨论新兴的研究趋势，模式和差距，以及它们对未来微服务架构研究的影响。


## 使用的方法

  采用系统映射的方法，从532篇可能的相关论文中选择了103项主要研究，并为其定义并应用了分类框架，以便为后续分析提取关键信息，
  合成了获得的现有的数据并清楚地概述了现有技术

## 得出的结论

1. 这项工作可用于微服务架构的分类框架
2. 该领域当前演技的系统图
3. 工业界采用这篇文章研究结果的可能性评估，可以启到参考框架的作用
4. 讨论新兴发现和对未来研究的影响


